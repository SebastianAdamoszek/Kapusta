{"version":3,"file":"static/js/528.515de0d3.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: 255px;\r\n  margin-inline: auto;\r\n  margin-block: 50px 105px;\r\n  width: 280px;\r\n  padding: 40px 20px;\r\n  background-color: var(--bg-white-color);\r\n  border-radius: 30px;\r\n  box-shadow: 0px 10px 60px 0px var(--box-shadow-color);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    margin: 80px auto 155px auto;\r\n    padding: 56px 83px;\r\n    width: 426px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    position: absolute;\r\n    top: 173px;\r\n    margin: 0;\r\n    left: 763px;\r\n    right: 91px;\r\n  }\r\n`;\r\n\r\nexport const FormAdvice = styled.p`\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  width: 222px;\r\n  text-align: center;\r\n  letter-spacing: 0.04em;\r\n  line-height: 1.4;\r\n  color: var(--secondaryTextColor);\r\n  margin-bottom: 16px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    width: auto;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    margin-bottom: 29px;\r\n  }\r\n`;\r\n\r\nexport const FormAdviceSecond = styled.p`\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  font-size: 12px;\r\n  width: 238px;\r\n  text-align: left;\r\n  letter-spacing: 0.04em;\r\n  line-height: 1.4;\r\n  color: var(--secondaryTextColor);\r\n  margin-bottom: 16px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @media screen and (min-width: 1280px) {\r\n    margin-bottom: 29px;\r\n  }\r\n`;\r\n\r\nexport const GoogleButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  column-gap: 9.5px;\r\n  border: none;\r\n  padding: 10px 19px;\r\n  border-radius: 26px;\r\n  cursor: pointer;\r\n  margin-bottom: 32px;\r\n  box-shadow: 1px 2px 3px 0px var(--box-shadow-color);\r\n`;\r\n\r\nexport const GoogleText = styled.span`\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  letter-spacing: 0.02em;\r\n  line-height: 1.17;\r\n`;\r\n\r\nexport const FormForm = styled.form`\r\n  row-gap: 8px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const FormLabel = styled.label`\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n  letter-spacing: 0.04em;\r\n  margin-bottom: 12px;\r\n  color: var(--textColor);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    font-size: 12px;\r\n    letter-spacing: 0.04em;\r\n  }\r\n`;\r\n\r\nexport const FormInput = styled.input`\r\n  padding: 17px 0 17px 20px;\r\n  font-size: 14px;\r\n  letter-spacing: 0.04em;\r\n  text-align: left;\r\n  min-width: 240px;\r\n  border-radius: 30px;\r\n  border: none;\r\n  margin-bottom: 20px;\r\n  background-color: var(--bg-input-color);\r\n  color: var(--text-input-color);\r\n\r\n  @media screen and (min-width: 768px) {\r\n    padding: 17px 0 17px 20px;\r\n    min-width: 259px;\r\n    margin-bottom: 32px;\r\n  }\r\n`;\r\n\r\nexport const FormButtons = styled.div`\r\n  display: flex;\r\n  column-gap: 4px;\r\n\r\n  @media screen and (min-width: 768px) {\r\n    column-gap: 15px;\r\n  }\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  color: var(--btn-grey-text-color);\r\n  letter-spacing: 0.02em;\r\n  align-items: center;\r\n  border: none;\r\n  border-radius: 16px;\r\n  padding: 12px 31px;\r\n  background-color: var(--btn-grey-bg-color);\r\n  box-shadow: 1px 3px 5px 0px var(--btn-grey-drop-shadow-color);\r\n  width: 50%;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: (--btn-orange-text-color);\r\n    background-color: var(--btn-orange-bg-color);\r\n    box-shadow: var(--btn-orange-box-shadow) 1px 3px 5px 0px;\r\n  }\r\n\r\n  @media screen and (min-width: 768px) {\r\n    padding: 12px 34px;\r\n  }\r\n`;\r\nexport const ErrorMessage = styled.p`\r\n  color: red;\r\n  font-size: 10px;\r\n  letter-spacing: 0.04em;\r\n  text-align: left;\r\n\r\n  margin-top: -20px;\r\n  margin-bottom: 20px;\r\n  @media screen and (min-width: 768px) {\r\n    margin-top: -32px;\r\n  }\r\n`;\r\nexport const ErrorStar = styled.span`\r\n  color: red;\r\n  font-size: 15px;\r\n  font-weight: 500;\r\n  letter-spacing: 0.04em;\r\n  text-align: left;\r\n`;\r\n","import { useDispatch } from 'react-redux';\r\nimport googleIcon from '../../icons/Google.png';\r\nimport { login } from '../../redux/Auth/operations';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport {\r\n  FormContainer,\r\n  FormForm,\r\n  FormAdvice,\r\n  FormAdviceSecond,\r\n  GoogleButton,\r\n  GoogleText,\r\n  FormLabel,\r\n  FormInput,\r\n  FormButtons,\r\n  FormButton,\r\n  ErrorMessage,\r\n  ErrorStar,\r\n} from '../LoginForm/LoginForm.styled';\r\nimport Swal from 'sweetalert2';\r\nexport const LoginForm = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [emptyEmailField, setEmptyEmailField] = useState(false);\r\n  const [emptyPasswordField, setEmptyPasswordField] = useState(false);\r\n\r\n  const handleLogin = async event => {\r\n    event.preventDefault();\r\n\r\n    const form = event.target;\r\n    const email = form.elements.email.value;\r\n    const password = form.elements.password.value;\r\n\r\n    if (email === '') {\r\n      setEmptyEmailField(true);\r\n      return;\r\n    } else {\r\n      setEmptyEmailField(false);\r\n    }\r\n\r\n    if (password === '') {\r\n      setEmptyPasswordField(true);\r\n      return;\r\n    } else {\r\n      setEmptyPasswordField(false);\r\n    }\r\n\r\n    if (email !== '' && password !== '') {\r\n      dispatch(login({ email, password }))\r\n        .unwrap()\r\n        .then(response => {\r\n          form.reset();\r\n          Swal.fire({\r\n            icon: 'success',\r\n            title: 'Success',\r\n            text: 'Logged in successfully!',\r\n          });\r\n        })\r\n        .catch(error => {\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Unauthorized',\r\n            text: 'Invalid email or password.',\r\n          });\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleRegistrationClick = () => {\r\n    navigate('/register');\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <FormAdvice>You can log in with your Google Account:</FormAdvice>\r\n      <GoogleButton>\r\n        <img src={googleIcon} alt=\"Google Icon\" />\r\n        <GoogleText>Google</GoogleText>\r\n      </GoogleButton>\r\n      <FormAdviceSecond>\r\n        Or log in using an email and password, after registering:\r\n      </FormAdviceSecond>\r\n      <FormForm onSubmit={handleLogin}>\r\n        <FormLabel htmlFor=\"loginEmail\">\r\n          {emptyEmailField && <ErrorStar>*</ErrorStar>}Email:{' '}\r\n        </FormLabel>\r\n        <FormInput\r\n          id=\"loginEmail\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"your@email.com\"\r\n          autoComplete=\"email\"\r\n        />\r\n        {emptyEmailField && <ErrorMessage>This is required field</ErrorMessage>}\r\n\r\n        <FormLabel htmlFor=\"loginPassword\">\r\n          {emptyPasswordField && <ErrorStar>*</ErrorStar>}Password:\r\n        </FormLabel>\r\n        <FormInput\r\n          id=\"loginPassword\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"enter password\"\r\n        />\r\n        {emptyPasswordField && (\r\n          <ErrorMessage>This is required field</ErrorMessage>\r\n        )}\r\n        <FormButtons>\r\n          <FormButton type=\"submit\">LOG IN</FormButton>\r\n          <FormButton type=\"button\" onClick={handleRegistrationClick}>\r\n            REGISTRATION\r\n          </FormButton>\r\n        </FormButtons>\r\n      </FormForm>\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\n// import { useDispatch } from 'react-redux';\r\n// import googleIcon from '../../icons/Google.png';\r\n// import { login } from '../../redux/Auth/operations';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import { useMediaQuery } from 'react-responsive'; // Import hooka useMediaQuery\r\n// import css from './LoginForm.module.css'; // Importować CSS jako 'styles'\r\n\r\n// export const LoginForm = () => {\r\n//   const dispatch = useDispatch();\r\n//   const navigate = useNavigate();\r\n//   const mobileScreen = useMediaQuery({\r\n//     query: '(min-width: 320px) and (max-width: 767px)',\r\n//   });\r\n//   const tabletScreen = useMediaQuery({\r\n//     query: '(min-width: 768px) and (max-width: 1279px)',\r\n//   });\r\n//   const desktopScreen = useMediaQuery({ query: '(min-width: 1280px)' });\r\n\r\n//   const handleLogin = event => {\r\n//     event.preventDefault();\r\n\r\n//     const form = event.target;\r\n//     const email = form.elements.email.value;\r\n//     const password = form.elements.password.value;\r\n\r\n//     dispatch(login({ email, password }));\r\n//     form.reset();\r\n//   };\r\n\r\n//   const handleRegistrationClick = () => {\r\n//     navigate('/register');\r\n//   };\r\n\r\n//   return (\r\n//     <div className={form()}>\r\n//       <p className={css.form__advice}>\r\n//         You can log in with your Google Account:\r\n//       </p>\r\n//       <button className={css.form__googleButton}>\r\n//         <img\r\n//           className={css.form__googleIcon}\r\n//           src={googleIcon}\r\n//           alt=\"Google Icon\"\r\n//         />\r\n//         <span className={css.form__googleText}>Google</span>\r\n//       </button>\r\n//       <p className={css.form__advice}>\r\n//         Or log in using an email and password, after registering:\r\n//       </p>\r\n//       <form className={css.form__form} onSubmit={handleLogin}>\r\n//         <label htmlFor=\"loginEmail\" className={css.form_label}>\r\n//           Email:{' '}\r\n//         </label>\r\n//         <input\r\n//           id=\"loginEmail\"\r\n//           className={css.form__input}\r\n//           name=\"email\"\r\n//           type=\"email\"\r\n//           placeholder=\"your@email.com\"\r\n//           autoComplete=\"email\"\r\n//         ></input>\r\n//         <label htmlFor=\"loginPassword\" className={css.form__label}>\r\n//           Password:\r\n//         </label>\r\n//         <input\r\n//           id=\"loginPassword\"\r\n//           className={css.form__input}\r\n//           name=\"password\"\r\n//           type=\"password\"\r\n//           placeholder=\"enter password\"\r\n//         ></input>\r\n//         <div className={css.form__buttons}>\r\n//           <button className={css.form__button} type=\"submit\">\r\n//             LOG IN\r\n//           </button>{' '}\r\n//           <button\r\n//             className={css.form__button}\r\n//             type=\"button\"\r\n//             onClick={handleRegistrationClick}\r\n//           >\r\n//             REGISTRATION\r\n//           </button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n\r\n//   function form() {\r\n//     if (mobileScreen) {\r\n//       return css.mobileForm;\r\n//     } else if (tabletScreen) {\r\n//       return css.tabletForm;\r\n//     } else {\r\n//       return css.desktopForm;\r\n//     }\r\n//   }\r\n// };\r\n","import { LoginForm } from '../../components/LoginForm/LoginForm';\r\nimport { CabbagesTop } from '../../components/Background/Unauthorized/CabbagesTop/CabbagesTop';\r\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\r\nimport { CabbagesBottom } from '../../components/Background/Unauthorized/CabbagesBottom/CabbagesBottom';\r\nimport { MainLogo } from '../../components/MainLogo/MainLogo';\r\nimport { useScreenSize } from '../../hooks/useScreenSize';\r\n\r\nconst Login = () => {\r\n  const { mobileScreen, tabletScreen, desktopScreen } = useScreenSize();\r\n\r\n  return (\r\n    <HelmetProvider>\r\n      <div>\r\n        <Helmet>\r\n          <title>Login</title>\r\n        </Helmet>\r\n\r\n        <CabbagesTop />\r\n        <MainLogo />\r\n        <LoginForm screensize={{ mobileScreen, tabletScreen, desktopScreen }} />\r\n        <CabbagesBottom />\r\n      </div>\r\n    </HelmetProvider>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["FormContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormAdvice","p","_templateObject2","FormAdviceSecond","_templateObject3","GoogleButton","button","_templateObject4","GoogleText","span","_templateObject5","FormForm","form","_templateObject6","FormLabel","label","_templateObject7","FormInput","input","_templateObject8","FormButtons","_templateObject9","FormButton","_templateObject10","ErrorMessage","_templateObject11","ErrorStar","_templateObject12","LoginForm","dispatch","useDispatch","navigate","useNavigate","emptyEmailField","setEmptyEmailField","useState","emptyPasswordField","setEmptyPasswordField","_jsxs","children","_jsx","src","googleIcon","alt","onSubmit","async","event","preventDefault","target","email","elements","value","password","login","unwrap","then","response","reset","Swal","icon","title","text","catch","error","htmlFor","id","name","type","placeholder","autoComplete","onClick","handleRegistrationClick","Login","mobileScreen","tabletScreen","desktopScreen","useScreenSize","HelmetProvider","Helmet","CabbagesTop","MainLogo","screensize","CabbagesBottom"],"sourceRoot":""}